temp = []
# temp.append(1) # FILO / first in last out
# temp.append(2)
# temp.append(3)
# temp.append(4)
##################### 
# temp.insert(0, 1)
# temp.insert(0, 2)
# temp.insert(0, 3)
# temp.insert(0, 4)

# print(temp)
# print(temp.pop()) #FIFO
#################################
#process -> Thread Thread (multi thread)
# 멀티 스레딩은 한 프로세스를 여러 수행단위(스레드)로 나누어 처리하는것을 말한다. 
# https://m.blog.naver.com/PostView.nhn?blogId=yuc1206&logNo=50141800358&proxyReferer=https:%2F%2Fwww.google.com%2F
# https://coneseo.tistory.com/40
# https://goodgid.github.io/What-is-Multi-Thread/ 
#
#멀티 태스킹과 유사한 점이 있다. 멀티태스킹은 한 PC에서 여러 작업(프로세스)를 동시에 수행하고, 멀티 스레딩은 한 프로세스에서 여러 실행의 흐름(스래드)를 동시에 수행한다
# 물론 CPU는 한번에 한 명령만 처리할수 있으므로 동시라고 해도 한 작업을 일정부분 처리하고, 다른작업을 일정부분 처리하고, 다시 처음 작업을 조금 처리하고... 이와 같은 과정을 반복하여 동시처럼 보이게 한다.

# 장점 
#  - CPU 이용률 최대화
#      CPU는 PC에서 가장 중요한 자원이다. 이 자원을 쉴틈업싱 활용하는 것은 굉장히 중요하다.
#      그러나 CPU는 가장 빠르고, 다른 자원은 비교적 느리기 때문에 최대한 활용하는 것이 쉽지 않다.
# - 대기시간, 응답시간 최소화
#      오랜 시간이 걸리는 작업을 수행하는 동안에도 사용자의 입력을 처리할 수 있다.
# - 실행의 흐름을 명확히 분리
#      한 작업을 한 스레드로 만들어, 개념적으로 실행의 흐름을 분리할 수 있다.
# - 경제성
#      프로세스 생성에 메모리와 자원을 할당하는 것은 비용이 많이 든다. 스레드는 자신이 속한 프로세스의 자원들을 공유하기 때문에 스레드를 생성하고 문맥교환을 하는편이 보다 경제적이다.

# 단점
#  - 장점이 많지만 단점도 많다. 가장 어려운점은 어렵다는것. 멀티 스레드 프로그래밍을 할 경우 다음 사항을 항상 주의하여야한다
#     race condition ( 두 명령어가 동시에 같은 장소를 엑세스 할때 수행결과를 예측 할수 없게 되는것 )
#     멀티 스레드 프로그램은 예측 불가능
#     실행 순서가 보장되지 않음
#     언제나, 어디서나 문맥 교환 발생 가능
#     스레드는 작은 변화에 매우 민감
#     스레드는 즉시 시작하지 않을 수 있음
#     하나의 스레드만 실행중인 경우 싱글 스레드의 실행시간이 개선되지 않고 오히려 지연될수 있음

#thread vs multi thread
#동기 처리 vs 비동기 처리

#동기처리
##### A ####
# 100 분
############
##### B ####
#10 분
############
# 총 소요시간 110분 A먼저 처리할때까지 B는 멈춤

#비동기 
# 총 소요시간 100분 동시에 처리 
# https://lacommune.tistory.com/82



